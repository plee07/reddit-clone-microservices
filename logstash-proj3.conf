input {
  file {
    type => "user-api"
    path => "/home/phil/Desktop/reddit-clone-microservices/user-api/user-api.log"
    # codec => multiline {
    #   pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"
    #   negate => "true"
    #   what => "previous"
    # }
  }
  file {
    type => "post-api"
    path => "/home/phil/Desktop/reddit-clone-microservices/post-api/post-api.log"
  }
  file {
    type => "comment-api"
    path => "/home/phil/Desktop/reddit-clone-microservices/comment-api/comment-api.log"
  }
}

filter {
  #If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
  if [message] =~ "\tat" {
    grok {
      match => ["message", "^(\tat)"]
      add_tag => ["stacktrace"]
    }
  }

  grok {
    match => [ "message", 
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})\s*%{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
               "message",
               "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})\s*%{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
             ]
  }

  # #Parsing out timestamps which are in timestamp field thanks to previous grok section
  # date {
  #   match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  # }    
}

output {
  if [type] == "user-api" {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "user-api-%{+YYYY.MM.dd}"
    }
  }
  if [type] == "post-api" {
   
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "post-api-%{+YYYY.MM.dd}"
    } 
  }
  if [type] == "comment-api" {
   
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "comment-api-%{+YYYY.MM.dd}"
    }
  }
  stdout { codec => rubydebug }
}
